// comments begin with //

// for convenience, define variable $(OBJS) to list of object files
const OBJS: string[] = [
  "draw_shapes.ts",
  "draw_chars.ts",
  "11x16font.ts",
  "uimain.ts",
  "5x7-font.ts",
];

// make has a "default rule" specifying how to build a an "object" file (.ts) from a TypeScript source file (.ts)
//       this rule includes $(CFLAGS) as one of tsc's parameters
const CFLAGS: string = "-g -O3"; // -g for debug, -O3 for optimization

// first target is built by default. Usually named "all"
function build(): void {
  compile();
}

// asciidraw (target) depends on all object files (prerequisites)
function compile(): void {
  const command = `tsc ${OBJS.join(" ")} --outFile asciidraw.js`;
  execSync(command, { stdio: "inherit" });
}

// all object files built from TypeScript files that include draw.ts
function buildDependencies(): void {
  OBJS.forEach((obj) => {
    const command = `tsc ${obj} --outFile ${obj.replace(".ts", ".js")}`;
    execSync(command, { stdio: "inherit" });
  });
}

// deletes files generated by compilation
function clean(): void {
  const command = `rm -f *.js`;
  execSync(command, { stdio: "inherit" });
}

// runs the compiled JavaScript file
function run(): void {
  const command = `node asciidraw.js`;
  execSync(command, { stdio: "inherit" });
}

// entry point
build();